/**
 * (C) Copyright 1998 by International Business Machines Corporation
 * 
 * Author: Claudio Fleiner <cfl@almaden.ibm.com>
 * 
 * The Software is owned by International Business Machines Corporation or one of
 * its subsidiaries ("IBM") and is copyrighted and licensed, not sold. 
 * 
 * IBM grants you a non-exclusive, non-transferable license to download the
 * Software. Implied licenses are negated.
 * 
 * You may not merge, distribute (for free or for sale) or sublicense the Software;
 * 
 * IBM licenses the Software to you on an "as is" basis, without warranty of any
 * kind. IBM hereby expressly disclaims all warranties or conditions, either
 * express or implied, including, but not limited to, the implied warranties or
 * conditions of merchantability and fitness for a particular purpose. You are
 * solely responsible for determining the appropriateness of using this Software
 * and assume all risks associated with the use of this Software, including but
 * not limited to the risks of program errors, damage to or loss of data, programs
 * or equipment, and unavailability or interruption of operations. Some
 * jurisdictions do not allow for the exclusion or limitation of implied
 * warranties, so the above limitations or exclusions may not apply to you.
 * 
 * IBM will not be liable for any direct damages or for any special, incidental,
 * or indirect damages or for any economic consequential damages (including lost
 * profits or savings), even if IBM has been advised of the possibility of such
 * damages. IBM will not be liable for the loss of, or damage to, your records or
 * data, or any damages claimed by you based on a third party claim. Some
 * jurisdictions do not allow for the exclusion or limitation of incidental or
 * consequential damages, so the above limitations or exclusions may not apply to
 * you.
 */
/* Generated By:JavaCC: Do not edit this line. Token.java Version 0.7pre3 */
/**
 * Describes the input token stream.
 */

public class Token {

  /**
   * An integer that describes the kind of this token.  This numbering
   * system is determined by JavaCCParser, and a table of these numbers is
   * stored in the file ...Constants.java.
   */
  public int kind;

  /**
   * beginLine and beginColumn describe the position of the first character
   * of this token; endLine and endColumn describe the position of the
   * last character of this token.
   */
  public int beginLine, beginColumn, endLine, endColumn;

  /**
   * The string image of the token.
   */
  public String image;

  /**
   * A reference to the next regular (non-special) token from the input
   * stream.  If this is the last token from the input stream, or if the
   * token manager has not read tokens beyond this one, this field is
   * set to null.  This is true only if this token is also a regular
   * token.  Otherwise, see below for a description of the contents of
   * this field.
   */
  public Token next;

  /**
   * This field is used to access special tokens that occur prior to this
   * token, but after the immediately preceding regular (non-special) token.
   * If there are no such special tokens, this field is set to null.
   * When there are more than one such special token, this field refers
   * to the last of these special tokens, which in turn refers to the next
   * previous special token through its specialToken field, and so on
   * until the first special token (whose specialToken field is null).
   * The next fields of special tokens refer to other special tokens that
   * immediately follow it (without an intervening regular token).  If there
   * is no such token, this field is null.
   */
  public Token specialToken;

  /**
   * Returns the image.
   */
  public final String toString()
  {
     return image;
  }

  /**
   * Returns a new Token object, by default. However, if you want, you
   * can create and return subclass objects based on the value of ofKind.
   * Simply add the cases to the switch for all those special cases.
   * For example, if you have a subclass of Token called IDToken that
   * you want to create if ofKind is ID, simlpy add something like :
   *
   *    case MyParserConstants.ID : return new IDToken();
   *
   * to the following switch statement. Then you can cast matchedToken
   * variable to the appropriate type and use it in your lexical actions.
   */
  public static final Token newToken(int ofKind)
  {
     switch(ofKind)
     {
       default : return new Token();
     }
  }

}
